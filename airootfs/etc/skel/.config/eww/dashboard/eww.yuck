;; -*-emacs-lisp-*-
;; vim:ft=lisp
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Converted by : @tripleo1
;; **

;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "/home/stig/.dotfiles/avatar.png")
(defvar NAME `whoami`)
(defpoll UNAME :interval "5m" `whoami`)

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)


;; Uptime vars
(defpoll UPHOUR :interval "5s" `awk '{print int($1/3600) == 1 ? "1 hour" : int($1/3600) " hrs"}' /proc/uptime`)
(defpoll UPMIN :interval "5s" `awk '{print int((($1%3600)/60)) == 1 ? "1 min" : int((($1%3600)/60)) " mins"}' /proc/uptime`)
(defpoll UPSEC :interval "5s" `awk '{print int($1%60), "secs"}' /proc/uptime`)

;; ** Widgets *************************************************************************

;; calendar
(defwidget cal []
	   (box :class "cal" :orientation "v"
  		(box :class "cal-in"
    		     (calendar :class "cal" 
			       :day calendar_day 
			       :year calendar_year))))

;; system
(defwidget system [] 
	   (box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
		     (box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			  (label :class "iconcpu" :text "侼")
			  (scale :min 0 :max 100 :value CPU_USAGE :active "false"))
		     (box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			  (label :class "iconmem" :text "")
			  (scale :min 0 :max 100 :value MEM_USAGE :active "false"))
		     (box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			  (label :class "iconbright" :text "")
			  (scale :min 0 :max 100 :value BLIGHT :active "false"))
		     (box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			  (label :class "iconbat" :text "")
			  (scale :min 0 :max 100 :value BATTERY :active "false")))))

;; clock
(defwidget clock [] 
	   (box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
		     (label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
		     (label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0 
		     (label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
		     (label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defwidget uptime [] 
	   (box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
		     (label :class "icontimer" :valign "center" :text "祥")
		     (box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
			  (label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
			  (label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; power buttons
(defwidget logout [] 
	   (box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_logout" :onclick "hyprctl dispatch exit" "")))
(defwidget sleep [] 
	   (box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl hibernate" ""))) ;; so it's actually hibernate
(defwidget reboot [] 
	   (box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_reboot" :onclick "systemctl reboot &" "")))
(defwidget poweroff [] 
	   (box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_poweroff" :onclick "systemctl poweroff &" "")))

;; ** Windows *************************************************************************


;; profile
(defwindow profile :stacking "bg" :focusable "false" :screen 1 :monitor 0 
	   :geometry (geometry :x 150 :y 150 :width 360 :height 440)
	   (user))

;; system
(defwindow system :stacking "bg" :focusable "false" :screen 1 :monitor 0
	   :geometry (geometry :x 60 :y 605 :width 380 :height 385)
	   (system))

;; clock
(defwindow clock :stacking "bg" :focusable "false" :screen 1 :monitor 0
           :geometry (geometry :x 1460 :y 100 :width 400 :height 155)
	   (clock))

;; uptime
(defwindow uptime :stacking "bg" :focusable "false" :screen 1 :monitor 0
	   :geometry (geometry :x 60 :y 100 :width 360 :height 155)
	   (uptime))

;; apps
(defwindow apps :stacking "bg" :focusable "false" :screen 1 :monitor 0
	   :geometry (geometry :x 1140 :y 490 :width 290 :height 280)
	   (apps))

;; calendar
(defwindow calendar :stacking "bg" :focusable "false" :screen 1 :monitor 0 ;; focusable "false" is a bad idea for the calendar ;-;
	   :geometry (geometry :x 1475 :y 620)
           (cal))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	   :geometry (geometry :x 5 :y 10 :width 155 :height 155)
	   (logout))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	   :geometry (geometry :x 170 :y 10 :width 155 :height 155)
	   (sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 :monitor 0
	   :geometry (geometry :x 65 :y 180 :width 155 :height 155)
	   (reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 :monitor 0
	   :geometry (geometry :x 170 :y 180 :width 155 :height 155)
	   (poweroff))

